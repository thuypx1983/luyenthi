<?php

define('PAYMENTS_PAYCARD_STATUS_APPROVED', 0);
define('PAYMENTS_PAYCARD_STATUS_PENDING', 1);
define('PAYMENTS_PAYCARD_STATUS_DECLINED', 2);

global $CARD_STATUS;
$CARD_STATUS=array(
        PAYMENTS_PAYCARD_STATUS_APPROVED=>t('Approved'),
        PAYMENTS_PAYCARD_STATUS_PENDING=>t('Pending'),
        PAYMENTS_PAYCARD_STATUS_DECLINED=>t('Declined'),
    );
global $CARD_TYPE;
$CARD_TYPE=array(
  1=>'Viettel',
  2=>'Mobilephone',
  3=>'Vinaphone'
);

/**
 * Implements hook_menu().
 */
function payments_menu() {
  $items = array();

  $items['payments/pay-card'] = array( //this creates a URL that will call this form at "examples/form-example"
    'title' => 'Nạp tiền qua thẻ điện thoại', //page title
    'description' => 'Nạp tiền qua thẻ điện thoại.',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('payments_pay_card_form'), //put the name of the form here
    'access callback' => TRUE
  );

  $items['payments/bank-transfer'] = array(
    'title' => 'Chuyển khoản qua ngân hàng',
    'page callback' => '_bank_transfer_content',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['payments'] = array(
    'title' => 'Thanh toán',
    'page callback' => '_payments_content',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );



  $items['payments/course/%/buy']=array(
    'title' => t('Buy product'), //page title
    'description' => 'Buy product.',
    'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
    'page arguments' => array('payments_buy_course_form',1), //put the name of the form here
    'access callback' => TRUE
  );

  //admin configure
  $items['admin/payments-paycard/%/edit'] = array(
    'title' => 'Edit transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payments_admin_txn',3,2),
    'access arguments' => array('access adminstration page'),
    'file' => 'payments.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/payments'] = array(
    'title' => 'payments configuration',
    'description' => 'This is the payments',
    'weight' => -100,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('payments_configure_form', 1),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function payments_configure_form($form, &$form_state){
  $payment_bank_transfer_content=variable_get('payment_bank_transfer_content',array('value'=>'','format'=>'text_format'));
  $form['payment_bank_transfer_content'] = [
    '#type' => 'text_format',
    '#title' => t('Bank transfer content'),
    '#description' => t('Bank transfer deatail'),
    '#default_value' => $payment_bank_transfer_content['value'],
    '#cols' => 40,
    '#rows' => 10,
    '#format' => $payment_bank_transfer_content['format'],
  ];

  // If you want to hide the text format.
  // $form['#after_build'][] = 'mymodule_admin_settings_form_form_after_build';

  return system_settings_form($form);
}

/**
 * Implements hook_theme()
 */
function payments_theme() {
  return array(
    'bank_transfer_content' => array(
      'render element' => 'elements',
      'template' => 'templates/bank-transfer-content',
    ),
    'payments_content' => array(
      'render element' => 'elements',
      'template' => 'templates/payments-content',
    ),
    'pay_card_content' => array(
      'render element' => 'elements',
      'template' => 'templates/pay-card-content',
    ),
  );
}

function _bank_transfer_content(){
  return theme('bank_transfer_content');
}

function _payments_content(){
  return theme('payments_content');
}


function _pay_card_content(){
  return theme('pay_card_content');
}

function payments_pay_card_form($form, &$form_state) {
  global $CARD_TYPE;

  $form['card_type']=array(
    '#title'=>t('Loại thẻ'),
    '#type' => 'select',
    '#options' => $CARD_TYPE,
    '#required' => TRUE,
  );
  $form['card_number']=array(
    '#type' => 'textfield',
    '#title' => t('Mã thẻ:'),
    '#required' => TRUE,
  );
  $form['card_serial']=array(
    '#type' => 'textfield',
    '#title' => t('Số thẻ'),
    '#required' => TRUE,
  );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Nạp thẻ'),
  );

  return $form;
}

function payments_pay_card_validate($form, &$form_state) {
  $x=1;
}

function payments_pay_card_form_submit($form, &$form_state) {
  $params = array(
    'status' => PAYMENTS_PAYCARD_STATUS_PENDING,
    'paycard_id' => null,
    'moneys' =>0,
    'card_type' => $form_state['values']['card_type'],
    'card_number' => $form_state['values']['card_number'],
    'card_serial' => $form_state['values']['card_serial'],
  );
  payments_pay_card_api($params);
}

/**
 * @return mixed
 * Hook_views_data
 */
function payments_views_data() {

  // ----------------------------------------------------------------
  // payments_paycard table
  // Describe the payments_paycard table.
  // Define the base group of this table. Fields that don't
  // have a group defined will go into this field by default.
  $data['payments_paycard']['table']['group'] = t('Payment paycard Transactions');

  $data['payments_paycard']['table']['base'] = array(
    'field' => 'paycard_id',
    'title' => t('Payment paycard Transactions'),
    'help' => t('Moneys transactions accumulated by users on your site.'),
  );

  // Describe the Moneys column of the Payment paycard table.
  $data['payments_paycard']['moneys'] = array(
    'title' => t('moneys'),
    'help' => t("A User's !Moneys for this transaction."), // The help that appears on the UI,
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
      'numeric' => TRUE,
      'name field' => 'moneys', // display this field in the summary
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );



  // Add relationship to user table.
  $data['payments_paycard']['uid'] = array(
    'title' => t('User'),
    'help' => t('Relate the Payment paycard table to the user table.'),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
      'numeric' => TRUE,
    ),
    'relationship' => array(
      'base' => 'users',
      'field' => 'uid',
      'label' => t('Users'),
      'handler' => 'views_handler_relationship',
    ),
  );

  $data['payments_paycard']['time_stamp'] = array(
    'title' => t('Timestamp'),
    'help' => t('The created timestamp for the transaction.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  $data['payments_paycard']['changed'] = array(
    'title' => t('Changed'),
    'help' => t('The changed timestamp for the transaction, for when the transaction is updated.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  $data['payments_paycard']['status'] = array(
    'title' => t('Status paycard'),
    'help' => t('The status of the transaction payments paycard.'),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
  );

  $data['payments_paycard']['description'] = array(
    'title' => t('Description'),
    'help' => t('The description for the transaction.'),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
  );
  $data['payments_paycard']['card_number'] = array(
    'title' => t('card number'),
    'help' => t('The card number for the transaction.'),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
  );

  $data['payments_paycard']['card_type'] = array(
    'title' => t('card type'),
    'help' => t('The card type for the transaction.'),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
  );

  $data['payments_paycard']['card_serial'] = array(
    'title' => t('card serial'),
    'help' => t('The card serial for the transaction.'),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
  );

  $data['payments_paycard']['operation'] = array(
    'title' => t('Operation'),
    'help' => t('The operation for the transaction.'),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    $data['payments_paycard']['paycard_id'] = array(
      'title' => t('Transaction ID'),
      'help' => t('Payment paycard Transaction ID'),
      'field' => array(
        'handler' => 'views_handler_field',
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
      'sort' => array(
        'handler' => 'views_handler_sort',
      ),
    ),
  );

  return $data;
}




function payments_pay_card_api($params) {
  global $user;

  // Test for the existence of parameters and set defaults if necessary.
  if (!isset($params['paycard_id'])) {
    // If a txn_id is passed in we'll do an UPDATE thus the std checks don't apply.
    if (!is_array($params)) {
      // Has to be an array to continue.
      return array(
        'status' => FALSE,
        'reason' => 'Parameters did not properly form as an array,
                     this is an internal module error.
                    ',
      );
    }
    if (!isset($params['uid'])) {
      $params['uid'] = $user->uid;
    }

    // Check if parameters are set.
    $params_null_check = array('card_type', 'card_number', 'card_serial', 'moneys', 'status', 'description');
    foreach ($params_null_check as $param_null_check) {
      if (!isset($params[$param_null_check])) {
        $params[$param_null_check] = NULL;
      }
    }

    if (!isset($params['status'])) {
      // If not passed then site default is used.
      $params['status'] = PAYMENTS_PAYCARD_STATUS_PENDING;
    }

    // Anonymous users do not get moneys, and there have to be moneys to process.
    if (empty($params['uid'])) {
      return array(
        'status' => FALSE,
        'reason' => 'uid or moneys not given. Anonymous users do not get moneys and there must be moneys to process.',
      );
    }
  }
  else {
    // We have a txn_id so we can look up some user information.
    $params['uid'] = db_query('SELECT uid from {payments_paycard} WHERE paycard_id = :paycard_id', array(':paycard_id' => $params['paycard_id']))->fetchField();
  } // If txn_id.
  // Load the user object that will be awarded the moneys.
  $account = user_load($params['uid']);
  if (!$account) {
    return array(
      'status' => FALSE,
      'reason' => 'invalid uid or user account could not be loaded',
    );
  }

  $params['changed'] = REQUEST_TIME;
  $params['time_stamp'] = REQUEST_TIME;

  if (!empty($params['paycard_id']) && $params['paycard_id'] > 0) {

    $ret = drupal_write_record('payments_paycard', $params, array('paycard_id'));

    usermoneys_usermoneysapi($params);
  }
  else {
    // Create new transaction record.
    $ret = drupal_write_record('payments_paycard', $params);

  }

  return array(
    'status' => TRUE,
    'transaction' => $params,
  );
}


/**
 * hook_views_data()..
 *
 * alter card type from integer to text
 * alter card status from integer to text
 */

function payments_views_pre_render(&$view) {
    global $CARD_TYPE,$CARD_STATUS;
  switch ($view->name) {
    case 'thanh_toan_bang_the_cao':
    case 'payments_paycard':
      //  override the global custom text field value

      $count=count($view->result);
      for($i=0;$i<$count;$i++){
        $view->result[$i]->payments_paycard_card_type=$CARD_TYPE[$view->result[$i]->payments_paycard_card_type];
        $view->result[$i]->payments_paycard_status=$CARD_STATUS[$view->result[$i]->payments_paycard_status];
      }
      //$x=1;
      //$view->field['paycard_id']->options['alter']['html'] = 'My custom text';
      break;
  }
}

function payments_buy_course_form($form, &$form_state) {
  global $user;
  $nid=arg(2);
  $node=node_load($nid);


  //check node exit
  if(!$node){
    drupal_goto('/node/1');
    drupal_exit();
  }


  //check course access
  if(course_access_check($node->nid,$user->uid)){
    drupal_goto(url('/node/'.$node->nid));
    drupal_exit();
  }

  $field_price=field_get_items('node',$node,'field_price');

  $form['node_title']=array(
    '#type' => 'markup',
    '#markup'=>'<div class="product-name">'.$node->title.'</div>',
  );
  $form['ownermoney']=array(
    '#type' => 'markup',
    '#markup'=>'<div class="product-money">'.number_format(usermoneys_get_current_moneys($user->uid)).'vnđ</div>',
  );
  $form['node_price']=array(
    '#type' => 'markup',
    '#markup'=>'<div class="product-price">'.number_format($field_price[0]['value']).'vnđ</div>',
  );
  $form['nid']=array(
    '#type' => 'hidden',
    '#value' => $nid,
    '#default_value'=>$nid,
  );

  $form['actions'] = array('#type' => 'actions');

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Mua'),
  );
  return $form;
}


function payments_buy_course_validate($form, &$form_state) {
  die('xxx');
  $x=1;
}

function payments_buy_course_form_submit($form, &$form_state) {
  payments_buy_course((int)($form_state['values']['nid']));

}

function payments_buy_course($nid){
  global $user;
  $node=node_load($nid);
  if($node){
    $field_price=field_get_items('node',$node,'field_price');
    $price=$field_price[0]['value'];
    $current_money=usermoneys_get_current_moneys();
    if($price<$current_money){
      $params = array(
        'moneys' => -$price,
        'uid' => $user->uid,
        'operation' => $user->name,
        'description' => t('Mua khóa học/bài thi'),
        'entity_type' => $node->type,
        'entity_id' => $node->nid,
        'time_stamp' => time(),
        'moderate' => 0,
        'approver_uid' => $user->uid,
      );
      //add course access
      course_access_add($nid,$user->uid);
      //minus money of user when buy a node
      usermoneys_usermoneysapi($params);
    }
  }
}


/**
 * Load a usermoneys transaction.
 *
 * @param $txn_id
 *   Usermoneys transaction Id.
 *
 * @return
 *   A loaded usermoneys transaction object.
 */
function payments_transaction_load($txn_id) {
  if (!empty($txn_id)) {
    $transaction = db_query('SELECT * from {payments_paycard} WHERE paycard_id = :paycard', array(':paycard' => $txn_id))->fetchObject();
  }
  if (empty($transaction)) {
    return FALSE;
  }

  // Load corresponding user object.
  $transaction->user = user_load($transaction->uid);

  return $transaction;
}

function payments_admin_access(){
  return true;
}

function payments_txn_status() {
  static $stati;
  if (empty($stati)) {
    $stati = array(
      PAYMENTS_PAYCARD_STATUS_APPROVED=>t('Approved'),
      PAYMENTS_PAYCARD_STATUS_PENDING=>t('Pending'),
      PAYMENTS_PAYCARD_STATUS_DECLINED=>t('Declined'),
    );
  }
  return $stati;
}