<?php
// Copyright 2005-2007 Khalid Baheyeldin http://2bits.com
define('USERMONEYS_TRANS_UCPOINTS', 'usermoneys_trans_ucpoints');
define('USERMONEYS_TRANS_LCPOINTS', 'usermoneys_trans_lcpoints');
define('USERMONEYS_TRANS_UCPOINT', 'usermoneys_trans_ucpoint');
define('USERMONEYS_TRANS_LCPOINT', 'usermoneys_trans_lcpoint');
define('USERMONEYS_TRANS_UNCAT', 'usermoneys_trans_uncat');

define('USERMONEYS_TXN_STATUS_APPROVED', 0);
define('USERMONEYS_TXN_STATUS_PENDING', 1);
define('USERMONEYS_TXN_STATUS_DECLINED', 2);

global $USERMONEYS_TXN_STATUS;
$USERMONEYS_TXN_STATUS=array(
  USERMONEYS_TXN_STATUS_APPROVED=>t('Approved'),
  USERMONEYS_TXN_STATUS_PENDING=>t('Pending'),
  USERMONEYS_TXN_STATUS_DECLINED=>t('Declined'),
);


define('USERMONEYS_DISPLAY_MESSAGE', 'usermoneys_display_message');

define('USERMONEYS_EXPIREAFTER_DATE', 'usermoneys_expireafter_date');
define('USERMONEYS_EXPIREON_DATE', 'usermoneys_expireon_date');


define('USERMONEYS_MONEYS_MODERATION', 'usermoneys_moneys_moderation');

//define('USERmoneys_TRANSACTION_TIMESTAMP', 'usermoneys_transaction_timestamp');
/**
 * Hook_init
 */
function usermoneys_init(){

}

/**
 * Implements hook_menu().
 */
function usermoneys_menu() {
  $items = array();
    $items['admin/usermoneys_transaction/%usermoneys_transaction/edit'] = array(
      'title' => 'Edit transaction',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('usermoneys_admin_txn',3,2),
      'access arguments' => array('access adminstration page'),
      'file' => 'usermoneys.admin.inc',
      'type' => MENU_LOCAL_TASK,
    );
    $items['admin/usermoneys/add'] = array(
      'title' => 'ADD point',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('usermoneys_admin_txn',2),
      'access arguments' => array('access adminstration page'),
      'file' => 'usermoneys.admin.inc',
      'type' => MENU_LOCAL_TASK,
    );
  return $items;
}

/**
 * @return mixed
 * Hook_views_data
 */
function usermoneys_views_data() {
    // ----------------------------------------------------------------
    // userMoneys table
    // Describe the userMoneys table.
    // Define the base group of this table. Fields that don't
    // have a group defined will go into this field by default.
    $data['usermoneys']['table']['group'] = t('User moneys');

    $data['usermoneys']['table']['base'] = array(
        'field' => 'uid',
        'title' => t('usermoneys'),
        'help' => t('Moneys by category accumulated by users on your site.'),
    );

    $data['usermoneys']['table']['join'] = array(
        'users' => array(
            'left_field' => 'uid',
            'field' => 'uid',
        ),
        'node' => array(
            'left_field' => 'uid',
            'field' => 'uid',
        )
    );

    // Describe the Moneys column of the userMoneys table.
    $data['usermoneys']['moneys'] = array(
        'title' => t('Current !Moneys in category'),
        'help' => t("A User's current !Moneys in a single category."), // The help that appears on the UI,
        'field' => array(
            'handler' => 'views_handler_field_numeric',
            'click sortable' => TRUE,
        ),
        'argument' => array(
            'handler' => 'views_handler_argument_numeric',
            'numeric' => TRUE,
            'name field' => 'moneys', // display this field in the summary
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_numeric',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
    );

    // Describe the last_update column of the userMoneys table.
    $data['usermoneys']['last_update'] = array(
        'title' => t('Last update in category'),
        'help' => t("The last update timestamp for a User's current !Moneys in a single category."),
        'field' => array(
            'handler' => 'views_handler_field_date',
            'click sortable' => TRUE,
        ),
        'sort' => array(
            'handler' => 'views_handler_sort_date',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_date',
        ),
    );

    // Add relationship to user table.
    $data['usermoneys']['uid'] = array(
        'title' => t('User'),
        'help' => t('Relate the userMoneys table to the user table.'),
        'relationship' => array(
            'base' => 'users',
            'field' => 'uid',
            'label' => t('Users'),
            'handler' => 'views_handler_relationship',
        ),
    );


    // ----------------------------------------------------------------
    // usermoneys_txn table
    // Describe the usermoneys_txn table.
    // Define the base group of this table. Fields that don't
    // have a group defined will go into this field by default.
    $data['usermoneys_txn']['table']['group'] = t('Usermoneys Transactions');

    $data['usermoneys_txn']['table']['base'] = array(
        'field' => 'txn_id',
        'title' => t('Usermoneys Transactions'),
        'help' => t('Moneys transactions accumulated by users on your site.'),
    );

    // Describe the Moneys column of the Usermoneys table.
    $data['usermoneys_txn']['moneys'] = array(
        'title' => t('moneys'),
        'help' => t("A User's !Moneys for this transaction."), // The help that appears on the UI,
        'field' => array(
            'handler' => 'views_handler_field_numeric',
            'click sortable' => TRUE,
        ),
        'argument' => array(
            'handler' => 'views_handler_argument_numeric',
            'numeric' => TRUE,
            'name field' => 'moneys', // display this field in the summary
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_numeric',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
    );



    // Add relationship to user table.
    $data['usermoneys_txn']['uid'] = array(
        'title' => t('User'),
        'help' => t('Relate the Usermoneys table to the user table.'),
        'argument' => array(
            'handler' => 'views_handler_argument_numeric',
            'numeric' => TRUE,
        ),
        'relationship' => array(
            'base' => 'users',
            'field' => 'uid',
            'label' => t('Users'),
            'handler' => 'views_handler_relationship',
        ),
    );

    $data['usermoneys_txn']['time_stamp'] = array(
        'title' => t('Timestamp'),
        'help' => t('The created timestamp for the transaction.'),
        'field' => array(
            'handler' => 'views_handler_field_date',
            'click sortable' => TRUE,
        ),
        'sort' => array(
            'handler' => 'views_handler_sort_date',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_date',
        ),
    );

    $data['usermoneys_txn']['changed'] = array(
        'title' => t('Changed'),
        'help' => t('The changed timestamp for the transaction, for when the transaction is updated.'),
        'field' => array(
            'handler' => 'views_handler_field_date',
            'click sortable' => TRUE,
        ),
        'sort' => array(
            'handler' => 'views_handler_sort_date',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_date',
        ),
    );

    $data['usermoneys_txn']['status'] = array(
      'title' => t('Status'),
      'help' => t('The status of the transaction.'),
      'field' => array(
        'handler' => 'views_handler_field',
      ),
      'filter' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
      'sort' => array(
        'handler' => 'views_handler_filter_numeric',
      ),
    );

    $data['usermoneys_txn']['description'] = array(
        'title' => t('Description'),
        'help' => t('The description for the transaction.'),
        'field' => array(
            'handler' => 'views_handler_field',
        ),
    );

    $data['usermoneys_txn']['reference'] = array(
        'title' => t('Reference'),
        'help' => t('The reference for the transaction.'),
        'field' => array(
            'handler' => 'views_handler_field',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
    );

    $data['usermoneys_txn']['expirydate'] = array(
        'title' => t('Expiry date'),
        'help' => t('The expiration date for the transaction.'),
        'field' => array(
            'handler' => 'views_handler_field_date',
            'click sortable' => TRUE,
        ),
        'sort' => array(
            'handler' => 'views_handler_sort_date',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_date',
        ),
    );

    $data['usermoneys_txn']['expired'] = array(
        'title' => t('Expired'),
        'help' => t('The expiry status for the transaction.'),
        'field' => array(
            'handler' => 'views_handler_field_numeric',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_numeric',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
    );

    $data['usermoneys_txn']['entity_id'] = array(
        'title' => t('Entity ID'),
        'help' => t('The referenced entity ID.'),
        'field' => array(
            'handler' => 'views_handler_field',
        ),
        'argument' => array(
            'handler' => 'views_handler_argument_numeric',
            'numeric' => TRUE,
        ),
    );

    $data['usermoneys_txn']['node'] = array(
        'title' => t('Node'),
        'help' => t('Used to relate to the node table.'),
        'real field' => 'entity_id',
        'relationship' => array(
            'base' => 'node',
            'base field' => 'nid',
            'label' => t('Node'),
            'handler' => 'views_handler_relationship',
            'extra' => array(
                array(
                    'field' => 'entity_type',
                    'value' => 'node',
                    'table' => 'usermoneys_txn',
                ),
            ),
        ),
    );

    $data['usermoneys_txn']['entity_type'] = array(
        'title' => t('Entity type'),
        'help' => t('The entity type for the transaction.'),
        'field' => array(
            'handler' => 'views_handler_field',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
    );

    $data['usermoneys_txn']['operation'] = array(
        'title' => t('Operation'),
        'help' => t('The operation for the transaction.'),
        'field' => array(
            'handler' => 'views_handler_field',
        ),
        'filter' => array(
            'handler' => 'views_handler_filter_string',
        ),
        'sort' => array(
            'handler' => 'views_handler_sort',
        ),
        $data['usermoneys_txn']['txn_id'] = array(
            'title' => t('Transaction ID'),
            'help' => t('Usermoneys Transaction ID'),
            'field' => array(
                'handler' => 'views_handler_field',
            ),
            'filter' => array(
                'handler' => 'views_handler_filter_numeric',
            ),
            'sort' => array(
                'handler' => 'views_handler_sort',
            ),
        ),
    );

    return $data;
}


/**
 * Load a usermoneys transaction.
 *
 * @param $txn_id
 *   Usermoneys transaction Id.
 *
 * @return
 *   A loaded usermoneys transaction object.
 */
function usermoneys_transaction_load($txn_id) {
  if (!empty($txn_id)) {
    $transaction = db_query('SELECT * from {usermoneys_txn} WHERE txn_id = :txn', array(':txn' => $txn_id))->fetchObject();
  }
  if (empty($transaction)) {
    return FALSE;
  }

  // Load corresponding user object.
  $transaction->user = user_load($transaction->uid);

  return $transaction;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function usermoneys_menu_local_tasks_alter(&$data, $router_item, $root_path) {
    // Add action link to add moneys on 'usermoneys' administration pages.
    if (strpos($root_path, 'admin/usermoneys_transaction') !== FALSE) {

        // Don't display the action link on some pages like settings and
        // approve or decline confirmation forms.
        $blacklist = array('settings', 'approve', 'decline');
        foreach ($blacklist as $blacklisted_path) {
            if (strpos($root_path, $blacklisted_path) !== FALSE) {
                return;
            }
        }

        $item = menu_get_item('admin/config/people/usermoneys/add');

        // For the transaction view pages, we want to directly link to the
        // user for this transaction.
        if (arg(4) == 'transaction' && (arg(6) == 'view' || arg(6) == 'edit')) {
            $transaction = usermoneys_transaction_load(arg(5));
            $item['href'] .= '/' . $transaction->uid;
        }

        if ($item['access']) {
            $data['actions']['output'][] = array(
                '#theme' => 'menu_local_action',
                '#link' => $item,
            );
        }
    }
}


function usermoneys_txn_status() {
    static $stati;
    if (empty($stati)) {
        $stati = array(
            USERMONEYS_TXN_STATUS_APPROVED => t('Approved'),
            USERMONEYS_TXN_STATUS_PENDING => t('Pending'),
            USERMONEYS_TXN_STATUS_DECLINED => t('Declined'),
        );
    }
    return $stati;
}


/**
 * Save usermoneys changes and call hooks.
 *
 * @param $params
 *    if (int) assumed to be moneys for current user
 *    Accepts an array of keyed variables and parameters
 *    'moneys' => # of moneys (int) (required)
 *    'moderate' => TRUE/FALSE
 *    'uid' => $user->uid
 *    'time_stamp' => unix time of the moneys assignment date
 *    'operation' => 'published' 'moderated' etc.
 *    'expirydate' => timestamp or 0, 0 = non-expiring; NULL = site default
 *    'description' => 'description'
 *    'reference' => reserved for module specific use
 *    'display' => whether or not to display "moneys awarded" message
 *    'txn_id' => Transaction ID of moneys, If present an UPDATE is performed
 *    'entity_id' => ID of an entity in the Database. ex. $node->id or $user->uid
 *    'entity_type' => string of the entity type. ex. 'node' or 'user' NOT 'node-content-custom'
 *
 * @return
 *   Array with status and reason.
 *     'status' => FALSE when no action is take, TRUE when moneys are credited or debited
 *     'reason' => (string) error message to indicate reason for failure
 */
function usermoneys_usermoneysapi($params) {
    global $user;

    // Test for the existence of parameters and set defaults if necessary.
    if (!isset($params['txn_id'])) {
        // If a txn_id is passed in we'll do an UPDATE thus the std checks don't apply.
        if (is_int($params)) {
            $params = array('moneys' => $params);
        }
        if (!is_array($params)) {
            // Has to be an array to continue.
            return array(
                'status' => FALSE,
                'reason' => 'Parameters did not properly form as an array,
                     this is an internal module error.
                    ',
            );
        }
        if (!isset($params['uid'])) {
            $params['uid'] = $user->uid;
        }

        // Check if parameters are set.
        $params_null_check = array('operation', 'description', 'reference', 'display', 'entity_id', 'entity_type');
        foreach ($params_null_check as $param_null_check) {
            if (!isset($params[$param_null_check])) {
                $params[$param_null_check] = NULL;
            }
        }

        if (!isset($params['moderate'])) {
            // If not passed then site default is used.
            $params['status'] = variable_get(USERMONEYS_MONEYS_MODERATION, USERMONEYS_TXN_STATUS_APPROVED);
        }
        else {
            $params['status'] = $params['moderate'] ? USERMONEYS_TXN_STATUS_PENDING : USERMONEYS_TXN_STATUS_APPROVED;
        }

        // Anonymous users do not get moneys, and there have to be moneys to process.
        if (empty($params['uid']) || empty($params['moneys'])) {
            return array(
                'status' => FALSE,
                'reason' => 'uid or moneys not given. Anonymous users do not get moneys and there must be moneys to process.',
            );
        }
    }
    else {
        // We have a txn_id so we can look up some user information.
        $params['uid'] = db_query('SELECT uid from {usermoneys_txn} WHERE txn_id = :txn_id', array(':txn_id' => $params['txn_id']))->fetchField();
    } // If txn_id.
    // Load the user object that will be awarded the moneys.
    $account = user_load($params['uid']);
    if (!$account) {
        return array(
            'status' => FALSE,
            'reason' => 'invalid uid or user account could not be loaded',
        );
    }

    // Call the _usermoneys hook, and stop if one of them returns FALSE.
    $rc = usermoneys_invoke_all('Moneys before', $params);

    foreach ($rc as $key => $value) {
        if ($value == FALSE) {
            // Do not process the moneys.
            return array(
                'status' => FALSE,
                'reason' => t('@key returned FALSE from the hook_usermoneys moneys before call', array('@key' => $key)),
            );
        }
    }

    $ret = _usermoneys_transaction($params);

    // Reset the static cache of usermoneys.
    drupal_static_reset('usermoneys_get_current_moneys');

    if ($ret == FALSE) {
        return array(
            'status' => FALSE,
            'reason' => 'transaction failed in _usermoneys_transaction, this is an internal module error',
        );
    }

    // Allow modules to define custom messages.
    if (!empty($params['message'])) {
        $message = $params['message'];
    }
    // Display message if either display property is not set and messages should
    // be displayed by default or display property is not FALSE.
    elseif (!empty($params['display']) || (!isset($params['display']) && variable_get(USERMONEYS_DISPLAY_MESSAGE, 1))) {
        // Prepare arguments. They are the same for all string combinations.
        $arguments = array_merge(usermoneys_translation(), array(
            '!username' => theme('username', array('account' => $account)),
            '%total' => usermoneys_get_current_moneys($params['uid']),
        ));

        $view_own_moneys = user_access('view own usermoneys') || user_access('view usermoneys') || user_access('administer usermoneys');
        $view_all_moneys = user_access('view usermoneys') || user_access('administer usermoneys');

        if ($params['status'] == USERMONEYS_TXN_STATUS_DECLINED) {
            // moneys have been declined.
            if ($account->uid == $user->uid && $view_own_moneys) {
                $message = format_plural($params['moneys'], 'You did not receive approval for @count !point in the %category category.', 'You did not receive approval for @count !moneys in the %category category.', $arguments);
            }
            elseif ($view_all_moneys) {
                $message = format_plural($params['moneys'], '!username did not receive approval for @count !point in the %category category.', '!username did not receive approval for @count !moneys in the %category category.', $arguments);
            }
        }
        elseif (isset($params['moneys']) && $params['moneys'] < 0) {
            if ($params['status'] == USERMONEYS_TXN_STATUS_PENDING) {
                if ($account->uid == $user->uid && $view_own_moneys) {
                    // Directly address the user if he is loosing moneys.
                    $message = format_plural(abs($params['moneys']), 'You just had a !point deducted, pending administrator approval.', 'You just had @count !moneys deducted, pending administrator approval.', $arguments);
                }
                elseif ($view_all_moneys) {
                    // Only display message about other users if user has permission to view usermoneys.
                    $message = format_plural(abs($params['moneys']), '!username just had a !point deducted, pending administrator approval.', '!username just had @count !moneys deducted, pending administrator approval.', $arguments);
                }
            }
            else {
                if ($account->uid == $user->uid && $view_own_moneys) {
                    $message = format_plural(abs($params['moneys']), 'You just had a !point deducted and now have %total !moneys in the %category category.', 'You just had @count !moneys deducted and now have %total !moneys in the %category category.', $arguments);
                }
                elseif ($view_all_moneys) {
                    $message = format_plural(abs($params['moneys']), '!username just had a !point deducted and now has %total !moneys in the %category category.', '!username just had @count !moneys deducted and now has %total !moneys in the %category category.', $arguments);
                }
            }
        }
        elseif (!empty($params['moneys'])) {
            if ($params['status'] == USERMONEYS_TXN_STATUS_PENDING) {
                if ($account->uid == $user->uid && $view_own_moneys) {
                    // Directly address the user if he is loosing moneys.
                    $message = format_plural(abs($params['moneys']), 'You just earned a !point, pending administrator approval.', 'You just earned @count !moneys, pending administrator approval.', $arguments);
                }
                elseif ($view_all_moneys) {
                    // Only display message about other users if user has permission to view usermoneys.
                    $message = format_plural(abs($params['moneys']), '!username just earned a !point, pending administrator approval.', '!username just earned @count !moneys, pending administrator approval.', $arguments);
                }
            }
            else {
                if ($account->uid == $user->uid && $view_own_moneys) {
                    $message = format_plural(abs($params['moneys']), 'You just earned a !point and now have %total !moneys in the %category category.', 'You just earned @count !moneys and now have %total !moneys in the %category category.', $arguments);
                }
                elseif ($view_all_moneys) {
                    $message = format_plural(abs($params['moneys']), '!username just earned a !point and now has %total !moneys in the %category category.', '!username just earned @count !moneys and now has %total !moneys in the %category category.', $arguments);
                }
            }
        }

        if (isset($message)) {
            drupal_set_message($message);
        }
    }
    // Call the _usermoneys hook to allow modules to act after moneys are awarded.
    usermoneys_invoke_all('moneys after', $params);
    return array(
        'status' => TRUE,
        'transaction' => $params,
    );
}

/**
 * Adds the moneys to the txn table.
 */
function _usermoneys_transaction(&$params) {
    // Check, again, for a properly formed array.
    if (!is_array($params)) {
        return FALSE;
    }
    if (!isset($params['txn_id'])) {
        // If a txn_id is preset we UPDATE the record instead of adding one
        // the standard checks don't apply.
        if (!is_numeric($params['moneys'])) {
            return FALSE;
        }
        if (!isset($params['uid'])) {
            global $user;
            $params['uid'] = $user->uid;
            // There must be a UID, anonymous does not receive moneys.
            if (!$params['uid'] > 0) {
                return FALSE;
            }
        }
        if (isset($params['expirydate']) && !is_numeric($params['expirydate'])) {
            return FALSE;
        }

        // Check if parameters are set.
        $params_null_check = array('operation', 'description', 'reference', 'expired', 'parent_txn_id', 'entity_id', 'entity_type');
        foreach ($params_null_check as $param_null_check) {
            if (!isset($params[$param_null_check])) {
                $params[$param_null_check] = NULL;
            }
        }


        if (!isset($params['expirydate'])) {
            $params['expirydate'] = usermoneys_get_default_expiry_date();
        }

        // Use current time for time_stamp if configured to always use the default,
        // not set, not a positive integer or in the future.

    }
    // Always force changed timestamp to current REQUEST_TIME for transaction tracking.
    $params['changed'] = REQUEST_TIME;

    if (!empty($params['txn_id']) && $params['txn_id'] > 0) {
        // A transaction ID was passed in so we'll update the transaction.
        $txn = (array) usermoneys_transaction_load($params['txn_id']);
        if (!$txn) {
            return FALSE;
        }

        // Don't superseed existing keys, just complete missing keys.
        $params += $txn;
        // Update existing transaction record for key txn_id.
        $ret = drupal_write_record('usermoneys_txn', $params, array('txn_id'));
        // Only update if the record has been successfully updated.
        if ($ret != FALSE) {
            _usermoneys_update_cache($params, $txn);
        }
    }
    else {
        // Create new transaction record.
        $ret = drupal_write_record('usermoneys_txn', $params);
        if ($ret != FALSE) {
            _usermoneys_update_cache($params);
        }
    }
    return TRUE;
}

function usermoneys_admin_access(){
    return true;
}

/**
 * Invokes hook_usermoneys() with params passed by references.
 *
 * @param $op
 *   The operation being performed.
 * @param &$params
 *   Parameters to be passed to the hook.
 *
 * @return
 *   An array of return values of the hook implementations. If modules return
 *   arrays from their implementations, those are merged into one array.
 */
function usermoneys_invoke_all($op, &$params = array()) {
    $return = array();
    foreach (module_implements('usermoneys') as $module) {
        $function = $module .'_usermoneys';
        $result = $function($op, $params);
        if (isset($result) && is_array($result)) {
            $return = array_merge_recursive($return, $result);
        }
        else if (isset($result)) {
            $return[] = $result;
        }
    }
    return $return;
}

/**
 * Update the caching table.
 *
 * @param $params
 *   Array with the transaction params.
 * @param $txn
 *   The original transaction, if this is an update.
 */
function _usermoneys_update_cache($txn, $old_txn = NULL) {
    // Store eventual updates in this array.
    $updates = array();
    $totals = array();
    if (!$old_txn) {
        // For new transactions, only update the cache for fully approved non-expired
        // moneys.
        if ($txn['status'] == USERMONEYS_TXN_STATUS_APPROVED && $txn['expired'] != 1) {
            // Calculate the current moneys based upon the tid.
            $updates['moneys'] = $txn['moneys'] + usermoneys_get_current_moneys($txn['uid']);
            $totals['moneys'] = $txn['moneys'] + usermoneys_get_current_moneys($txn['uid'], 'all');
        }
    } else  {
        // For existing transactions, it is a bit more complex.

        // Expired transactions that were expired before can be ignored.
        if ($txn['expired'] == 1 && $old_txn['expired'] == 1) {
            return;
        }

        if ($old_txn['tid'] != $txn['tid']) {
            // If the category has changed, remove the moneys of the old transaction
            // from the old category.
            $remove_moneys = usermoneys_get_current_moneys($txn['uid'], $old_txn['tid']) - $old_txn['moneys'];
            db_merge('usermoneys')
                ->key(array(
                    'uid' => $txn['uid'],
                    'tid' => (int) $old_txn['tid'],
                ))
                ->fields(array(
                    'moneys' => $remove_moneys,
                ))
                ->execute();

            // Subtract the moneys from the total.
            $totals['moneys'] = usermoneys_get_current_moneys($txn['uid'], 'all') - $old_txn['moneys'];

            if ($txn['status'] == USERMONEYS_TXN_STATUS_APPROVED) {
                // Make sure to add the moneys so that they are added to the new category.
                $updates['moneys'] = usermoneys_get_current_moneys($txn['uid'], $txn['tid']) +  $txn['moneys'];

                // Add them to the totals.
                $totals['moneys'] += $txn['moneys'];
            }
        }
        else if ($old_txn['status'] == USERMONEYS_TXN_STATUS_APPROVED && $txn['status'] != USERMONEYS_TXN_STATUS_APPROVED) {
            // If the transaction goes from approved to not approved, subtract the
            // moneys to the total.
            $updates['moneys'] = usermoneys_get_current_moneys($txn['uid'], $txn['tid']) - $old_txn['moneys'];
            $totals['moneys'] = usermoneys_get_current_moneys($txn['uid'], 'all') - $old_txn['moneys'];
        }
        else if ($txn['moneys'] != $old_txn['moneys'] && $old_txn['status'] == USERMONEYS_TXN_STATUS_APPROVED && $txn['status'] == USERmoneys_TXN_STATUS_APPROVED) {
            // If the category did not change but the moneys and the transaction
            // was and still is approved, update the moneys difference.
            $updates['moneys'] = usermoneys_get_current_moneys($txn['uid'], $txn['tid']) + ($txn['moneys'] - $old_txn['moneys']);
            $totals['moneys'] = usermoneys_get_current_moneys($txn['uid'], 'all') + ($txn['moneys'] - $old_txn['moneys']);

        }
        elseif ($old_txn['status'] != USERMONEYS_TXN_STATUS_APPROVED && $txn['status'] == USERMONEYS_TXN_STATUS_APPROVED) {
            // Calculate the current moneys based upon the tid.
            $updates['moneys'] = usermoneys_get_current_moneys($txn['uid'], $txn['tid']) + $txn['moneys'];
            $totals['moneys'] = usermoneys_get_current_moneys($txn['uid'], 'all') + $txn['moneys'];
        }
    }
    if (!empty($updates)) {
        $max_moneys = usermoneys_get_max_moneys($txn['uid']);
        // If the new moneys are higher then the maximum, update it.
        if ($updates['moneys'] > $max_moneys) {
            $updates['max_moneys'] = $updates['moneys'];
        }
        $updates['last_update'] = REQUEST_TIME;

        // Insert or update the usermoneys caching table with the user's current
        // moneys.
        db_merge('usermoneys')
            ->key(array(
                'uid' => $txn['uid']
            ))
            ->fields($updates)
            ->execute();
    }

    // Update totals if necessary.
    if (!empty($totals)) {
        // Update the total max moneys if necessary.
        $max_moneys_total = usermoneys_get_max_moneys($txn['uid'], 'all');
        if ($totals['moneys'] > $max_moneys_total) {
            $totals['max_moneys'] = $totals['moneys'];
        }
        $totals['last_update'] = REQUEST_TIME;

        // Insert or update the usermoneys total caching table with the user's current
        // moneys.
        db_merge('usermoneys_total')
            ->key(array(
                'uid' => $txn['uid'],
            ))
            ->fields($totals)
            ->execute();
    }
}

/**
 * Get current moneys of a user.
 *
 * @param $uid
 *   User ID of the user to get or lose the moneys.
 * @param $tid
 *   Term ID to get moneys for, or 'all'.
 *
 * @return
 *   Number of current moneys in that user's account.
 */
function usermoneys_get_current_moneys($uid = NULL, $tid = 'all') {
    $moneys = drupal_static(__FUNCTION__, array());
    if (!$uid) {
        global $user;
        $uid = $user->uid;
    }
    if (!isset($moneys[$uid])) {
        $moneys[$uid] = (int) db_query('SELECT moneys FROM {usermoneys} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
    }
    return $moneys[$uid];
}


/**
 * Determines the correct default expiration date.
 *
 * @return
 *   The default expiration date.
 */
function usermoneys_get_default_expiry_date() {
  $expirydate = usermoneys_date_to_timestamp(variable_get(USERMONEYS_EXPIREON_DATE, 0));
  if ($expirydate < REQUEST_TIME) {
    $expirydate = variable_get(USERMONEYS_EXPIREON_DATE, 0);
    if ($expirydate) {
      $expirydate = REQUEST_TIME + $expirydate;
    }
  }
  return (int) $expirydate;
}

/**
 * Gets the number of maximal moneys of that user.
 *
 * @param $uid
 *   User id of the user to get or lose the moneys.
 *
 * @return
 *   Number of max moneys in that user's account.
 */
function usermoneys_get_max_moneys($uid = NULL, $tid = 'all') {
  $max = drupal_static(__FUNCTION__, array());

  // Check if uid is passed as a parameter.
  if (!$uid) {
    // It is not, so we use the currently logged in user's uid.
    global $user;
    $uid = $user->uid;
  }


  // Check if we have already cached the maximum for the user/term combination on previous calls.
  if (!isset($max[$uid])) {
    $max[$uid] = db_query('SELECT max_moneys FROM {usermoneys} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  }
  // Return the cached value.
  return $max[$uid];
}

/**
 * Modifies FAPI date setting to timestamp.
 *
 * @return
 *   UNIX timestamp.
 */
function usermoneys_date_to_timestamp($date) {
  //This takes the FAPI date form array and returns a timestamp
  if ($date) {
    return mktime(0, 0, 0, $date['month'], $date['day'], $date['year']);
  }
}

/**
 * Returns an array of common translation placeholders.
 */
function usermoneys_translation() {
  static $trans;

  if (!isset($trans)) {
    $trans = array(
      '!Moneys' => check_plain(variable_get(USERMONEYS_TRANS_UCPOINTS, 'Moneys')),
      '!moneys' => check_plain(variable_get(USERMONEYS_TRANS_LCPOINTS, 'moneys')),
      '!Money' => check_plain(variable_get(USERMONEYS_TRANS_UCPOINT, 'Money')),
      '!money' => check_plain(variable_get(USERMONEYS_TRANS_LCPOINT, 'money')),
      '!Uncategorized' => check_plain(variable_get(USERMONEYS_TRANS_UNCAT, 'General')),
    );
  }
  return $trans;
}

/**
 * hook_views_data()..
 *
 * alter card type from integer to text
 * alter card status from integer to text
 */

function usermoneys_views_pre_render(&$view) {
    global $USERMONEYS_TXN_STATUS;
  switch ($view->name) {
    case 'usermoneys_transaction':
      //  override the global custom text field value

      $count=count($view->result);
      for($i=0;$i<$count;$i++){
        $view->result[$i]->usermoneys_txn_status=$USERMONEYS_TXN_STATUS[$view->result[$i]->usermoneys_txn_status];
      }
      break;
  }
}