<?php
/**
 * Implements hook_menu().
 */
function excel_to_multichoice_menu() {
    $items = array();
    $items['admin/multichoice/import'] = array(
      'title' => 'Import multichoice',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('excel_to_multichoice_form'),
      'access arguments' => array('access adminstration page'),
      'type' => MENU_LOCAL_TASK,
    );
    return $items;
}

function excel_to_multichoice_form($form, &$form_state){

  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('File:'),
    '#description' => t('Upload a file, allowed extensions: xlsx'),
    //'#required' => true,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Import data',
  );

  return($form);
}

function excel_to_multichoice_form_validate($form , &$form_state){

  $file = file_save_upload('file', array('file_validate_extensions' => array('xls xlsx'),));

  if ($file) {
    if ($file = file_move($file, 'public://importquestion')) {
      $form_state['values']['file'] = $file;


    }else {
      form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
    }
  }
}

/**
 * Submit function for submit import form.
 */
function excel_to_multichoice_form_submit($form, &$form_state) {
 if($form_state['values']['file']){
   $file_path=drupal_realpath($form_state['values']['file']->uri);
   _excel_to_multichoice_read_excel($file_path);
   file_delete($form_state['values']['file'],TRUE);
 }
}

function _excel_to_multichoice_read_excel($inputFileName){
    global $user;
    //Had to change this path to point to IOFactory.php.
    //Do not change the contents of the PHPExcel-1.8 folder at all.
    include('libs/PHPExcel-1.8/Classes/PHPExcel/IOFactory.php');

    //Use whatever path to an Excel file you need.
    try {
        $inputFileType = PHPExcel_IOFactory::identify($inputFileName);
        $objReader = PHPExcel_IOFactory::createReader($inputFileType);
        $objPHPExcel = $objReader->load($inputFileName);
    } catch (Exception $e) {
        die('Error loading file "' . pathinfo($inputFileName, PATHINFO_BASENAME) . '": ' .
            $e->getMessage());
    }

    $sheet = $objPHPExcel->getSheet(0);
    $highestRow = $sheet->getHighestRow();
    $highestColumn = $sheet->getHighestColumn();

    $rows=array();
    for ($row = 1; $row <= $highestRow; $row++) {
        $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, null, true, false);
        $rows[]=$rowData[0];
    }


  $settings=array();
    while(count($rows)>0){
      $first_row=array_shift($rows);
      if(intval($first_row[0])==$first_row[0] and $first_row[0]> 0 and $first_row[0]<=12){
        if(isset($settings['alternatives']) and count($settings['alternatives'])==4){
          //insert node
          if(!_excel_to_multichoice_exist_node_by_title($settings['title'])){
            drupal_set_message('Đã tồn tại câu hỏi: <b>'.$settings['title'].'</b>','warning');
          }else{
            $node = (object) $settings;

            node_save($node);

            // Small hack to link revisions to our test user.
            db_update('node_revision')
              ->fields(array('uid' => $node->uid))
              ->condition('vid', $node->vid)
              ->execute();
            drupal_set_message('Tạo câu hỏi thành công: <a href="'.url('node/'.$node->nid.'/edit').'">'.$node->title.'</a>');
          }

          $settings=array();
        }
        $term_level1=taxonomy_get_term_by_name('Lớp '.trim($first_row[0]), 'topic');
        $term_level3=_excel_to_multichoice_create_term($term_level1,$first_row);
        $settings= array(
          'title' => truncate_utf8(strip_tags($first_row[4]),254, true, true),
          'type' => 'multichoice',
          'choice_multi' => 0,
          'choice_random' => 0,
          'choice_boolean' => 0,
          'comment'   => 1,
          'changed'   => REQUEST_TIME,
          'moderate'  => 0,
          'promote'   => 0,
          'revision'  => 1,
          'uid'=>$user->uid,
          'log'       => '',
          'status'    => 1,
          'sticky'    => 0,
          'revisions' => NULL,
          'language'  => LANGUAGE_NONE,
          'body' => array(LANGUAGE_NONE => array(array('value' => $first_row[4],'format'=>'full_html'))),
        );
        $settings['complexity'][LANGUAGE_NONE][0]['value']=intval($first_row[3]);
        $settings['field_topic'][LANGUAGE_NONE][0]['tid']=$term_level3->tid;
        $alternatives=array();
        $alternatives['answer']['value'] = $first_row[5];
        $alternatives['answer']['format'] = 'full_html';
        $alternatives['feedback_if_chosen']['value'] = '';
        $alternatives['feedback_if_chosen']['format'] = 'full_html';
        $alternatives['feedback_if_not_chosen']['value'] = '';
        $alternatives['feedback_if_not_chosen']['format'] = 'full_html';
        $alternatives['score_if_chosen']=$first_row[6]? 1:0;
        $alternatives['score_if_not_chosen'] = 0;
        $settings['alternatives'][]=$alternatives;

      }else{
        if($first_row[0]== '' and $first_row[5]!=""){
          $alternatives=array();
          $alternatives['answer']['value'] = $first_row[5];
          $alternatives['answer']['format'] = 'full_html';
          $alternatives['feedback_if_chosen']['value'] = '';
          $alternatives['feedback_if_chosen']['format'] = 'full_html';
          $alternatives['feedback_if_not_chosen']['value'] = '';
          $alternatives['feedback_if_not_chosen']['format'] = 'full_html';
          $alternatives['score_if_chosen']=$first_row[6]? 1:0;
          $alternatives['score_if_not_chosen'] = 0;
          $settings['alternatives'][]=$alternatives;
        }
      }
    }
}

function _excel_to_multichoice_create_term($term_level1,$first_row){
  if($term_level1){
    $term_level1=array_shift($term_level1);
    $tree=taxonomy_get_tree($term_level1->vid, $term_level1->tid, $max_depth = 1, $load_entities = true);
    $term_level2=NULL;
    foreach($tree as $item){
      if(strtolower($item->name)==trim(strtolower($first_row[1]))){
        $term_level2=$item;
      }
    }
    if(!$term_level2){
      $term_level2_name=ucfirst(trim(strtolower($first_row[1])));
      $term_level2 = new stdClass();
      $term_level2->name = $term_level2_name; // The name of the term
      $term_level2->vid = 10; // The ID of the parent vocabulary
      $term_level2->parent = $term_level1->tid; // This tells taxonomy that this is a top-level term
      taxonomy_term_save($term_level2);

    }

    $tree=taxonomy_get_tree($term_level2->vid, $term_level2->tid, $max_depth = 1, $load_entities = true);
    $term_level3=NULL;
    foreach($tree as $item){
      if(strtolower($item->name)==trim(strtolower($first_row[2]))){
        $term_level3=$item;
      }
    }
    if(!$term_level3){
      $term_level3_name=ucfirst(trim(strtolower($first_row[2])));
      $term_level3 = new stdClass();
      $term_level3->name = $term_level3_name; // The name of the term
      $term_level3->vid = 10; // The ID of the parent vocabulary
      $term_level3->parent = $term_level2->tid; // This tells taxonomy that this is a top-level term
      taxonomy_term_save($term_level3);
    }

  }else{
    $term_level1_name=ucfirst(trim(strtolower('Lớp '.trim($first_row[0]))));
    $term_level1 = new stdClass();
    $term_level1->name = $term_level1_name; // The name of the term
    $term_level1->vid = 10; // The ID of the parent vocabulary
    $term_level1->parent = 0; // This tells taxonomy that this is a top-level term
    taxonomy_term_save($term_level1);

    $term_level2_name=ucfirst(trim(strtolower('Lớp '.trim($first_row[1]))));
    $term_level2 = new stdClass();
    $term_level2->name = $term_level2_name; // The name of the term
    $term_level2->vid = 10; // The ID of the parent vocabulary
    $term_level2->parent = $term_level1->tid; // This tells taxonomy that this is a top-level term
    taxonomy_term_save($term_level2);

    $term_level3_name=ucfirst(trim(strtolower('Lớp '.trim($first_row[2]))));
    $term_level3 = new stdClass();
    $term_level3->name = $term_level3_name; // The name of the term
    $term_level3->vid = 10; // The ID of the parent vocabulary
    $term_level3->parent = $term_level2->tid; // This tells taxonomy that this is a top-level term
    taxonomy_term_save($term_level3);
  }

  return $term_level3;
}

function _excel_to_multichoice_exist_node_by_title($title){
  $row = db_query('SELECT nid FROM {node} WHERE BINARY title = :mytitle', array(':mytitle' =>   $title))->fetchField();
  if(!isset($row['nid'])) {
    return false;
  }
  return true;
}

